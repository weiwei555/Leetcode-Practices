      Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.

      Notice: string "abc" repeated 0 times is "", repeated 1 time is "abc" and repeated 2 times is "abcabc".



      Example 1:

      Input: a = "abcd", b = "cdabcdab"
      Output: 3
      Explanation: We return 3 because by repeating a three times "abcdabcdabcd", b is a substring of it.
      Example 2:

      Input: a = "a", b = "aa"
      Output: 2


      Constraints:

      1 <= a.length, b.length <= 104
      a and b consist of lowercase English letters.
      
      
// First try: faster than 82%

class Solution {
    public int repeatedStringMatch(String a, String b) {
        if (a.contains(b)) { return 1; }
        int result = 0;
        int index = 0;
        int start = b.indexOf(a);
        if (b.replace(a.substring(0,1), "").equals("")) {
            return b.length() / a.length() + b.length() % a.length();
        }
        // find how many (whole) a are in b
        while (b.indexOf(a, index) != -1){
            index = b.indexOf(a, index) + a.length();
            result ++;
        }
        // if the start of b is not a whole a
        if (!(start == 0)) {
            result ++;
        }
        // if the end of b is not a whole a
        if (a.length() > b.length() || !(b.substring(b.length()-a.length()).equals(a))) {
            result ++;
        }
        if (!((a.repeat(result)).contains(b))) {
            result = -1;
        }
        return result;
    }
}
